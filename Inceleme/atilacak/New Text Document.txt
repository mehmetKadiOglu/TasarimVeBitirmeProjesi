application.properties


## default connection pool
spring.datasource.hikari.connectionTimeout=20000
spring.datasource.hikari.maximumPoolSize=5

## PostgreSQL
spring.datasource.url=jdbc:postgresql://localhost:5432/postgres
spring.datasource.username=postgres
spring.datasource.password=password

#drop n create table again, good for testing, comment this in production
spring.jpa.hibernate.ddl-auto=create




        <dependency>
            <groupId>org.postgresql</groupId>
            <artifactId>postgresql</artifactId>
        </dependency>

 <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>2.1.2.RELEASE</version>
    </parent>

    <properties>
        <java.version>1.8</java.version>
        <downloadSources>true</downloadSources>
        <downloadJavadocs>true</downloadJavadocs>
    </properties>

    <dependencies>

        <!-- jpa, crud repository -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-jpa</artifactId>
        </dependency>

        <!-- PostgreSQL -->
        <dependency>
            <groupId>org.postgresql</groupId>
            <artifactId>postgresql</artifactId>
        </dependency>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>

    </dependencies>





Rectangle rect = new Rectangle(0,0,350,300);
        Rectangle clip = new Rectangle(20,20,200,200);
        Shape shape = Shape.subtract(rect, clip);
        shape.setFill(Color.RED);



vm options -Djava.awt.headless=false. Bu  Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize(); kullanýmýna izin veriyor.
screenSizeden ekranýn boyutlarýný alýyorsun.
Click için oposity lazým her zaman




    @Override
    protected Initializable call()   return (Initializable) fxmLoader.getController();
extends Task<Initializable>


Stage subStage = new Stage();

AnchorPane page = null; bu fxml loader tarafýndan doldurulur.
Pageyi yeni bir sceneye verip stageye setliyoruz.
,



public static ConfigurableApplicationContext applicationContext;
        applicationContext = SpringApplication.run(AAAAAA.class,"");
        applicationContext.getAutowireCapableBeanFactory().autowireBean(this);



loader.setBuilderFactory(new JavaFXBuilderFactory());
    loader.setControllerFactory(applicationContext::getBean);