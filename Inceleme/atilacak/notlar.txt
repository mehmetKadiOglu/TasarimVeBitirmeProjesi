ByteBuffer byteBuffer = ByteBuffer.allocate(capasite);
byteBuffer.putInt(Integer)
byte[] byteArray = buffer.array();

ByteBuffer receivedByteBuffer = ByteBuffer.wrap(byte[] array);

byteBuffer.limit() => get size


Integer.toBinaryString(byteBuffer.getInt(i)) => String binary "111100"


        FXMLLoader fxmlLoader = new FXMLLoader(getClass().getResource("/" + path));
        fxmlLoader.setBuilderFactory(new JavaFXBuilderFactory());
        fxmlLoader.setResources(m_resourceBundle);                  loader.setControllerFactory(applicationContext::getBean); => spring için. Ýçerisinde beanlar varsa controllerin bunla çaðýr.
	tab.setContent(fxmlLoader.load());


    public static ConfigurableApplicationContext applicationContext;
    applicationContext = SpringApplication.run(DOOBTactical.class,"");
    applicationContext.getAutowireCapableBeanFactory().autowireBean(this);


extends Application=> init and start override




private static ResourceBundle m_resourceBundle;
m_resourceBundle= new PropertyResourceBundle(new InputStreamReader(new FileInputStream("resources/.....properties"),"windows-1254"));


Dimension m_screenSize;
m_screenSize = Toolkit.getDefaultToolkit().getScreenSize();
-Djava.awt.headless=false
-Dcom.sun.javafx.isEmbedded=true
-Dcom.sun.javafx.touch=true
-Dcom.sun.javafx.virtualKeyboard=javafx
-Dsun.java2d.noddraw=true
-Djavafx.autoproxy.disable=true




    public static Initializable openSubStage(StageTypeEnum stageType, ResourceBundle rb) throws Exception {
        FXMLLoader fxmLoader = new FXMLLoader();
        AnchorPane page;
        try(InputStream in = XXXX.class.getResourceAsStream("/"+stageType.getStageType())){
            fxmLoader.setBuilderFactory(new JavaFXBuilderFactory());
            fxmLoader.setLocation(XXXX.class.getResource("/"+stageType.getStageType()));
            fxmLoader.setControllerFactory(XXXX.applicationContext::getBean);  =>    public static ConfigurableApplicationContext applicationContext;
            fxmLoader.setResources(rb);
            page = fxmLoader.load(in);
        }
        return (Initializable) fxmLoader.getController();     =>> cast controller (FxmlController)openSubStage(). Controller sýnýflarý implement etmeli Initializable
    }




            @NamedArg(value = "orientation", defaultValue = "H") String orientation,
            @NamedArg(value = "childAlignment", defaultValue = "2") String childAlignment,








public class StageService extends Task<Initializable> {
    private double width;
    private double height;
    private double posX;
    private double posY;
    private static StageManager stageManager = null;
    private static ResourceBundle m_resourceBundle = null;
    private static MainAplication (extend edilecek aplicationdan) application = null; aslýnda sadece primaryStage lazým

    public StageService(StageTypeEnum stageType, double width, double height, double posX, double posY) {
        this.stageType = stageType;
        this.width = width;
        this.height = height;
        this.posX = posX;
        this.posY = posY;
    }
    @Override
    protected Initializable call() throws Exception {
        Stage subStage = new Stage();
        AnchorPane page = null;
        FXMLLoader fxmLoader = null;
        try{
            fxmLoader = new FXMLLoader(XXX.class.getResource("/" + stageType.getStageType()));
            fxmLoader.setBuilderFactory(new JavaFXBuilderFactory());
            fxmLoader.setControllerFactory(XXXX.applicationContext::getBean);
            fxmLoader.setResources(m_resourceBundle);
            page = fxmLoader.load();
            page.setCache(true);
            page.setCacheHint(CacheHint.SPEED);
        }
        catch (Exception ex){
            logger.error(ex.toString());
            return null;
        }
        Scene scene;
        subStage.initStyle(StageStyle.UNDECORATED);
        subStage.initOwner(application.getPrimaryStage());
        if ("")
            subStage.initModality(Modality.APPLICATION_MODAL);
        else
            subStage.initModality(Modality.NONE);
        scene = new Scene(page, width, height);
        scene.setFill(Color.TRANSPARENT);
        subStage.setScene(scene);
        subStage.sizeToScene();
        subStage.setX(posX);
        subStage.setY(posY);
        subStage.initStyle(StageStyle.TRANSPARENT);
        subStage.setOpacity(1);
        return (Initializable) fxmLoader.getController();
    }
}

            Task task = new StageService();
            task.setOnSucceeded(event -> {
                try{
                    controller = (Controller) task.getValue();
                    controller .getStage().show();
                    controller .setApp(screenSize);
                }
                catch (Exception ex){
                    logger.error(ex.toString());
                }
                finally {
                }
            });
            task.run();

    public ProgressIndicator createAndAddProgress(){
        ProgressIndicator progressIndicator = new ProgressIndicator();
        progressIndicator.setMinWidth(300);
        progressIndicator.setMinHeight(300);
        DropShadow dropShadow = new DropShadow();
        dropShadow.setColor(Color.RED);
        dropShadow.setOffsetX(0);
        dropShadow.setOffsetY(0);
        dropShadow.setWidth(5);
        dropShadow.setHeight(5);
        progressIndicator.setEffect(dropShadow);
        AnchorPane.setLeftAnchor( progressIndicator,  screenSize.getWidth() / 2 - 150);
        AnchorPane.setTopAnchor( progressIndicator,  screenSize.getHeight() / 2 - 150);
        Platform.runLater(() -> fxAnchorPane.getChildren().add(progressIndicator));
        return progressIndicator;
    }




<JFXSlider />


@SpringBootApplication(scanBasePackages = "")
@EnableJpaRepositories(basePackages = "")
@EntityScan(basePackages = "")
@EnableCaching


@CacheConfig(cacheNames = "")









    public final void setObjectType(Enum value) {
        this.objectTypeProperty().set(value);
    }

    public final Enum getObjectType() {
        return (Enum)this.objectType.get();
    }

    public ObjectProperty<Enum> objectTypeProperty() {
        if (this.objectType == null) {
            this.objectType = new ObjectPropertyBase<Enum>() {
                public Object getBean() {
                    return TacticalTextLabel.this;
                }

                public String getName() {
                    return "deneme";
                }
            };
        }

        return this.objectType;
    }





    private ObjectProperty<Enum> objectType;